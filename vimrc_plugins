" vimrc file with only plugin related settings

" get vim-plug if not installed
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" To install plugins run :PlugInstall
" To update plugins run :PlugUpdate
" To force update plugins (and run the do command) run :PlugUpdate!
" To view status of plugins run :PlugStatus
call plug#begin('~/.vim/bundle')

" searching
"TODO: fuzzy finder ctrl-p or fzf?
Plug 'nelstrom/vim-visual-star-search'
" after a visual selection, press * or # to search for that text

"colors
Plug 'jnurmine/Zenburn'
Plug 'altercation/vim-colors-solarized'

"commands
Plug 'tpope/vim-fugitive' " git integration with :Git
Plug 'tpope/vim-repeat' " let '.' repeat plugins
Plug 'tpope/vim-commentary' " comment lines
" toggles the comment lines specified.
" gcgc uncomment adjacent commented lines
" [count]gcc to comment count lines
" gc{motion}
" visual mode then gc to comment it
" :7,17Commentary to comment lines 7-17
" :g/TODO/Commentary global invocation
Plug 'tpope/vim-unimpaired' " :help unimpaired
" #[<space> add # lines before (or ] for after) current cursor
" #[e #]e move current line # lines up for down
" =os enable/disable spelling
" =ow enable/disable word wrap
" [y ]y encode/decode c strings (add escape chars,etc)
" ]b [b to move to the next buffer (see bufers with :ls)
" ]a [a move to next argument file (see with :args)
" ]l [l move to next location list (like ale and youcompleteme)
Plug 'tpope/vim-surround' " :help surround
" opening [ = delete contained whitespace. closing ] don't delete whitespace
" use S instead of s to place the surrounded object on its own line
" cs"' -> change "h" to 'h'
" ysw] -> add [] to text objext w, ys = you surround (according to tpope..)
" yss) -> yss is a special case to work on the whole line
" ds" -> delete surrounding
" use S"[( in visual selection to surround selection
Plug 'tpope/vim-speeddating'
" use Ctrl-a and ctrl-x to update date stamps correctly
Plug 'tpope/vim-vinegar'
" press - in any buffer to open the dir listing, - again to go up, etc.
" press . to use file in an ex command
" y. to yank absolute path to file under the cursor
Plug 'tpope/vim-abolish'
" provided normal mode cr command to coerce word to snake_case, camelCase, etc.
" crc: camel crm: mixed cr_ or crs: snake cru: snake upper cr-: dash cr<space>: space
" provides :Subvert (or just :S) ex command to replace words and the :Abolish

Plug 'AndrewRadev/splitjoin.vim',  {'for': ['c','cpp','python', 'vim', 'sh']}
" This plugin is code syntax aware and will split/join lines accordingly
" gJ - join multiple lines into one
" gS - split one line into multiple


Plug 'tmhedberg/SimpylFold' " make folding work for pythonb wth usual zc/zo commands
let g:SimpylFold_docstring_preview=1 " Preview docstring in fold text
let g:SimpylFold_fold_docstring=1 " Fold docstrings
let b:SimpylFold_fold_docstring=1 " Fold docstrings (buffer local)
let g:SimpylFold_fold_impor=1 " Fold imports
let b:SimpylFold_fold_import=1 " Fold imports (buffer local)


"code completion/semantics
if !empty($IDEVIM)
    set path+=** " to easily find headers, apparently not recommend, but hey.
    if v:version >= 800
        Plug 'w0rp/ale', {'for': ['python', 'sh']} " ycm does c family
    else
        Plug 'vim-syntastic/syntastic' {'for': ['python', 'sh']}
    endif
    Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clang-completer', 'frozen': 1,
    \   'on': 'YcmDiags',
    \   'for': ['c','cpp','python', 'vim', 'sh']}
endif
"TODO: test out the below plugins before enabling in the repo
"Plug 'Raimondi/delimitMate' " insert mode auto completion for quotes,paren,etc.
"Plug 'SirVer/ultisnips' " insert mode code snippets

"ui plugins
Plug 'powerman/vim-plugin-AnsiEsc' " display ansi color codes in vim with :AnsiEsc
Plug 'junegunn/goyo.vim' " :Goyo
Plug 'junegunn/limelight.vim' " :Limelight
let g:limelight_conceal_ctermfg = 'gray'

call plug#end()

colorscheme solarized

" Ale settings
let g:ale_lint_on_enter = 0 " don't lint on opening file
let g:ale_lint_delay = 500 " ms before linting kicks in while typing
let g:ale_lint_on_text_changed = 'always'
let g:ale_fix_on_save = 0
let g:ale_sign_error = '✗'
" let g:ale_sign_error = 'x'
let g:ale_sign_style_error = 'S✗'
" let g:ale_sign_style_error = 'Sx'
let g:ale_sign_warning = 'w'
let g:ale_sign_style_warning = 'Sw'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]' " format when cursor over line
let g:ale_loclist_msg_format = '[%linter% %code%] %s [%severity%]' "loclist format
"note that pylint is not async, it requires data to be on disk
let g:ale_linters = {
\   'python': ['flake8', 'pylint'],
\   'sh': ['shellcheck']
\}
let g:ale_fixers = {
\   'python': ['autopep8']
\}

nnoremap <leader>af :ALEFix<CR> " use ale fixers on the file
nnoremap <leader>at :ALEToggle<CR> " turn ale on/off
nnoremap <leader>ae :lopen<CR> " open location list with err/war msgs
nnoremap <leader>ea :lclose<CR> " close location list with err/war msgs
nnoremap <leader>ac :ALEReset<CR> " clean all err/wan msgs
"nnoremap ]l :ALENextWrap<CR>
"nnoremap [l :ALEPreviousWrap<CR>

"Syntastic settings
" Using ALE instead
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"set sessionoptions-=blank " ignore error windows on :mksession
"
""let g:syntastic_always_populate_loc_list = 1 " force loading errors in bottom screen
""let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 0
"let g:syntastic_check_on_wq = 0
"let g:syntastic_error_symbol = "✗"
"let g:syntastic_warning_symbol = "w" "
"let g:syntastic_loc_list_height = 10
"let g:syntastic_stl_format = "[%E{Err: #%e line#%fe}%B{, }%W{Warn: #%w line#%fw}]"
"
"nnoremap <leader>sc :SyntasticCheck <CR> " run syntax checkers on last save
"nnoremap <leader>se :Errors<CR> <C-w>j " Open up the Syntastics errors screen
"nnoremap <leader>es :lclose<CR> " close the Syntastic errors screen
"nnoremap <leader>sr :SyntasticReset<CR> " remove all syntastic msgs on screen


"YouCompleteMe settings
"g:ycm_disable_for_files_larger_than_kb = 1000 " in kb. default=1000
let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_always_populate_location_list = 1 " populates (but doesn't show) loc list
"let g:ycm_error_symbol = "✗"
let g:ycm_error_symbol = "x"
let g:ycm_warning_symbol = "w" "

" :YcmDebugInfo "display ycmd settings and compilation flags
" :YcmCompleter RestartServer /path/to/python3 restart server with optional new binary
nnoremap <leader>yo :YcmDiags<CR> " the plugin is mapped to turn on with this
nnoremap <leader>yr :YcmForceCompileAndDiagnostics<CR> " recompile and show err
nnoremap <leader>ye :YcmDiags<CR> " display bottom row list of errors
nnoremap <leader>ey :lclose<CR> " close the YCM errors screen
nnoremap <leader>yf :YcmCompleter FixIt<CR> " fix the errors on the current line
nnoremap <leader>yg :YcmCompleter GoTo<CR> " Goto file that defines or implmnt symbl
nnoremap <leader>ygr :YcmCompleter GoToReferences<CR> " find references to symbol
nnoremap <leader>yt :YcmCompleter GetType<CR> " print the type of the variable
nnoremap <leader>yd :YcmCompleter GetDoc<CR> " show docstring
nnoremap <leader>y2 :YcmCompleter RestartServer python2<CR>
nnoremap <leader>y3 :YcmCompleter RestartServer python3<cr>
